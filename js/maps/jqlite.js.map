{"version":3,"names":[],"mappings":"","sources":["jqlite.js"],"sourcesContent":["\r\n/*\r\n * jqlite - JavaScript library to query and manipulate DOM\r\n\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014 Jesús Manuel Germade Castiñeiras <jesus@germade.es>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\n(function (root, factory) {\r\n  var jqlite = factory(root);\r\n\r\n  if( typeof module === 'object' && typeof exports === 'object' ) {\r\n    module.exports = jqlite;\r\n  } else {\r\n    if ( typeof define === 'function' ) {\r\n      define('jqlite', function () { return jqlite; } );\r\n    } else if( typeof angular === 'function' ) {\r\n      angular.module('jqlite', []).constant('jqlite', jqlite );\r\n    } else {\r\n      root.jqlite = jqlite;\r\n    }\r\n    if( !root.$ ) {\r\n      root.$ = jqlite;\r\n    }\r\n  }\r\n\r\n})(this, function (root) {\r\n  'use strict';\r\n\r\n  function _isType (type) {\r\n      return function (o) {\r\n          return (typeof o === type);\r\n      };\r\n  }\r\n\r\n  function _instanceOf (_constructor) {\r\n      return function (o) {\r\n          return ( o instanceof _constructor );\r\n      };\r\n  }\r\n\r\n\tvar _isObject = _isType('object'),\r\n\t\t\t_isFunction = _isType('function'),\r\n\t\t\t_isString = _isType('string'),\r\n\t\t\t_isNumber = _isType('number'),\r\n\t\t\t_isBoolean = _isType('boolean'),\r\n\t\t\t_isArray = Array.isArray || _instanceOf(Array),\r\n\t\t\t_isDate = _instanceOf(Date),\r\n\t\t\t_isRegExp = _instanceOf(RegExp),\r\n      _isElement = function(o) {\r\n        return o && o.nodeType === 1;\r\n      },\r\n      _find = function (list, iteratee) {\r\n        if( !( iteratee instanceof Function ) ) {\r\n          var value = iteratee;\r\n          iteratee = function (item) {\r\n            return item === value;\r\n          };\r\n        }\r\n\r\n        for( var i = 0, n = list.length ; i < n ; i++ ) {\r\n          if( iteratee(list[i]) ) {\r\n            return {\r\n              index: i,\r\n              found: list[i]\r\n            };\r\n          }\r\n        }\r\n\r\n        return {\r\n          index: -1\r\n        };\r\n      };\r\n\r\n  var arrayShift = Array.prototype.shift;\r\n\r\n  function _merge () {\r\n    var dest = arrayShift.call(arguments),\r\n        src = arrayShift.call(arguments),\r\n        key;\r\n\r\n    while( src ) {\r\n\r\n      if( typeof dest !== typeof src ) {\r\n        dest = _isArray(src) ? [] : ( _isObject(src) ? {} : src );\r\n      }\r\n\r\n      if( _isObject(src) ) {\r\n\r\n        for( key in src ) {\r\n          if( src[key] !== undefined ) {\r\n            if( typeof dest[key] !== typeof src[key] ) {\r\n                dest[key] = _merge(undefined, src[key]);\r\n            } else if( _isArray(dest[key]) ) {\r\n                [].push.apply(dest[key], src[key]);\r\n            } else if( _isObject(dest[key]) ) {\r\n                dest[key] = _merge(dest[key], src[key]);\r\n            } else {\r\n                dest[key] = src[key];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      src = arrayShift.call(arguments);\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  function _extend () {\r\n    var dest = arrayShift.call(arguments),\r\n        src = arrayShift.call(arguments),\r\n        key;\r\n\r\n    while( src ) {\r\n      for( key in src) {\r\n        dest[key] = src[key];\r\n      }\r\n      src = arrayShift.call(arguments);\r\n    }\r\n\r\n    return dest;\r\n  }\r\n\r\n  var matchesSelectorProp = (function (proto) {\r\n    if( proto.matchesSelector ) {\r\n      return 'matchesSelector';\r\n    } else if( proto.webkitMatchesSelector ) {\r\n      return 'webkitMatchesSelector';\r\n    } else if( proto.mozMatchesSelector ) {\r\n      return 'mozMatchesSelector';\r\n    } else if( proto.msMatchesSelector ) {\r\n      return 'msMatchesSelector';\r\n    } else if( proto.oMatchesSelector ) {\r\n      return 'oMatchesSelector';\r\n    }\r\n    throw new Error('your browser does not support matchesSelector');\r\n  })(Element.prototype);\r\n\r\n  // function stopEvent (e) {\r\n  //   if(e) e.stopped = true;\r\n  //   if (e &&e.preventDefault) e.preventDefault();\r\n  //   else if (window.event && window.event.returnValue) window.eventReturnValue = false;\r\n  // }\r\n\r\n  var triggerEvent = document.createEvent ? function (element, eventName, args, data) {\r\n      var event = document.createEvent('HTMLEvents');\r\n      event.data = data;\r\n      event.args = args;\r\n      event.initEvent(eventName, true, true);\r\n      element.dispatchEvent(event);\r\n      return event;\r\n    } : function (element, eventName, args, data) {\r\n      var event = document.createEventObject();\r\n      event.data = data;\r\n      event.args = args;\r\n      element.fireEvent('on' + eventName, event);\r\n      return event;\r\n    };\r\n\r\n    var runScripts = eval,\r\n        noop = function noop () {},\r\n        auxDiv = document.createElement('div'),\r\n        detached = document.createElement('div'),\r\n        classListEnabled = !!auxDiv.classList;\r\n\r\n  // Events support\r\n\r\n  if( !auxDiv.addEventListener && !document.body.attachEvent ) {\r\n    throw 'Browser not compatible with element events';\r\n  }\r\n\r\n  var _attachElementListener = auxDiv.addEventListener ? function(element, eventName, listener) {\r\n        return element.addEventListener(eventName, listener, false);\r\n      } : function(element, eventName, listener) {\r\n        return element.attachEvent('on' + eventName, listener);\r\n      },\r\n      _detachElementListener = auxDiv.removeEventListener ? function(element, eventName, listener) {\r\n        return element.removeEventListener(eventName, listener, false);\r\n      } : function(element, eventName, listener) {\r\n        return element.detachEvent('on' + eventName, listener );\r\n      };\r\n\r\n  function detachElementListener (element, eventName, srcListener) {\r\n\r\n    if( srcListener === undefined ) {\r\n      if( element.$$jqListeners && element.$$jqListeners[eventName] ) {\r\n        for( var i = 0, n = element.$$jqListeners[eventName].length ; i < n ; i++ ) {\r\n          _detachElementListener( element, eventName, element.$$jqListeners[eventName][i] );\r\n        }\r\n        element.$$jqListeners[eventName] = [];\r\n      }\r\n      return;\r\n    }\r\n\r\n    if( element.$$jqListeners && element.$$jqListeners[eventName] ) {\r\n      var _listener = _find(element.$$jqListeners[eventName], function (l) {\r\n        return l.srcListener === srcListener;\r\n      });\r\n\r\n      if( _listener.found ) {\r\n        element.$$jqListeners[eventName].splice( _listener.index, 1 );\r\n        _detachElementListener( element, eventName, _listener.found );\r\n      }\r\n    }\r\n  }\r\n\r\n  function attachElementListener (element, eventName, listener, once) {\r\n\r\n    var _listener = once ? function(e) {\r\n        listener.apply(element, [e].concat(e.args) );\r\n        detachElementListener(element, eventName, listener);\r\n    } : function(e){\r\n        listener.apply(element, [e].concat(e.args) );\r\n    };\r\n\r\n    _listener.srcListener = listener;\r\n\r\n    element.$$jqListeners = element.$$jqListeners || {};\r\n    element.$$jqListeners[eventName] = element.$$jqListeners[eventName] || [];\r\n\r\n    element.$$jqListeners[eventName].push(_listener);\r\n\r\n    _attachElementListener( element, eventName, _listener );\r\n  }\r\n\r\n  // jqlite function\r\n\r\n  function pushMatches( list, matches ) {\r\n    for( var i = 0, len = matches.length; i < len; i++ ) {\r\n        list[i] = matches[i];\r\n    }\r\n    list.length += len;\r\n    return list;\r\n  }\r\n\r\n  var RE_TAG = /^[a-z-_]$/i;\r\n\r\n  function stringMatches (selector, element) {\r\n    var char0 = selector[0];\r\n\r\n    if( char0 === '<') {\r\n      auxDiv.innerHTML = selector;\r\n      var jChildren = pushMatches( new ListDOM(), auxDiv.children );\r\n      return jChildren;\r\n    } else if ( selector.indexOf(' ') !== -1 || selector.indexOf(':') !== -1 ) {\r\n      return pushMatches( new ListDOM(), element.querySelectorAll(selector) );\r\n    } else if( char0 === '#' ) {\r\n      var found = element.getElementById(selector.substr(1));\r\n      if( found ) {\r\n        var listdom = new ListDOM();\r\n        listdom[0] = found;\r\n        listdom.length = 1;\r\n        return listdom;\r\n      } else {\r\n        return pushMatches( new ListDOM(), element.querySelectorAll(selector) );\r\n      }\r\n    } else if( char0 === '.' ) {\r\n      return pushMatches( new ListDOM(), element.getElementsByClassName(selector.substr(1)) );\r\n    } else if( RE_TAG.test(selector) ) {\r\n      // console.log(document.getElementsByTagName(selector), element.getElementsByTagName(selector).length);\r\n      return pushMatches( new ListDOM(), element.getElementsByTagName(selector) );\r\n    }\r\n    return pushMatches( new ListDOM(), element.querySelectorAll(selector) );\r\n  }\r\n\r\n  function initList(selector) {\r\n\r\n    if( selector instanceof ListDOM ) {\r\n      return selector;\r\n    } else if( _isArray(selector) || selector instanceof NodeList || selector instanceof HTMLCollection ) {\r\n      return pushMatches( new ListDOM(), selector );\r\n    } else if( selector === window || selector === document || selector instanceof HTMLElement || selector instanceof Element || _isElement(selector) ) {\r\n      var list2 = new ListDOM();\r\n      list2[0] = selector;\r\n      list2.length = 1;\r\n      return list2;\r\n\r\n    } else if( _isFunction(selector) ) {\r\n      ready(selector);\r\n    } else if( selector === undefined ) {\r\n      return new ListDOM();\r\n    }\r\n  }\r\n\r\n  function jqlite (selector, element){\r\n    if( _isString(selector) ) {\r\n      return stringMatches(selector, element || document );\r\n    }\r\n    return initList(selector);\r\n  }\r\n\r\n  jqlite.noop = noop;\r\n\r\n  jqlite.extend = function (deep) {\r\n    var args = [].slice.call(arguments);\r\n    if( _isBoolean(deep) ) {\r\n      args.shift();\r\n    } else {\r\n      deep = false;\r\n    }\r\n    if( deep ) {\r\n      _merge.apply(null, args );\r\n    } else {\r\n      _extend.apply(null, args );\r\n    }\r\n  };\r\n\r\n  jqlite.isObject = _isObject;\r\n  jqlite.isFunction = _isFunction;\r\n  jqlite.isString = _isString;\r\n  jqlite.isNumber = _isNumber;\r\n  jqlite.isBoolean = _isBoolean;\r\n  jqlite.isArray = _isArray;\r\n  jqlite.isDate = _isDate;\r\n  jqlite.isRegExp = _isRegExp;\r\n  jqlite.isElement = _isElement;\r\n\r\n  var $ = jqlite;\r\n\r\n  // document ready\r\n\r\n  var _onLoad = window.addEventListener ? function (listener) {\r\n    window.addEventListener('load', listener, false);\r\n  } : function (listener) {\r\n    window.attachEvent('onload', listener );\r\n  };\r\n\r\n  function ready (callback) {\r\n    if( _isFunction(callback) ) {\r\n      if (/loaded|complete/.test(document.readyState)) {\r\n        callback();\r\n      } else {\r\n        _onLoad(callback);\r\n      }\r\n    }\r\n  }\r\n\r\n  jqlite.ready = ready;\r\n\r\n  // ListDOM\r\n\r\n  function ListDOM(){}\r\n\r\n  ListDOM.prototype = Object.create(Array.prototype);\r\n  ListDOM.prototype.ready = ready;\r\n  ListDOM.prototype.extend = function (deep) {\r\n    var args = [].slice.call(arguments);\r\n    if( _isBoolean(deep) ) {\r\n      args.shift();\r\n    } else {\r\n      deep = false;\r\n    }\r\n    if( deep ) {\r\n      _merge.apply(null, [ListDOM.prototype].concat(args) );\r\n    } else {\r\n      _extend.apply(null, [ListDOM.prototype].concat(args) );\r\n    }\r\n  };\r\n\r\n  jqlite.fn = ListDOM.prototype;\r\n\r\n  function filterDuplicated (list) {\r\n    if( list.length <= 1 ) {\r\n      return list;\r\n    }\r\n\r\n    var filteredList = list.filter(function () {\r\n      if( this.___found___ ) {\r\n        return false;\r\n      }\r\n      this.___found___ = true;\r\n      return true;\r\n    });\r\n\r\n    for( var i = 0, len = filteredList.length; i < len ; i++ ) {\r\n      delete filteredList[i].___found___;\r\n    }\r\n    return filteredList;\r\n  }\r\n\r\n  ListDOM.prototype.get = function(pos) {\r\n      return pos ? this[pos] : this;\r\n    };\r\n\r\n  ListDOM.prototype.eq = function(pos) {\r\n      if( !_isNumber(pos) ) {\r\n        throw 'number required';\r\n      }\r\n      var item = ( pos < 0 ) ? this[this.length - pos] : this[pos], list = new ListDOM();\r\n\r\n      if(item) {\r\n        list[0] = item;\r\n        list.length = 1;\r\n      }\r\n      return list;\r\n    };\r\n\r\n  ListDOM.prototype.first = function() {\r\n      var list = new ListDOM();\r\n\r\n      if( this.length ) {\r\n        list[0] = this[0];\r\n        list.length = 1;\r\n      }\r\n      return list;\r\n    };\r\n\r\n  ListDOM.prototype.last = function() {\r\n      var list = new ListDOM();\r\n\r\n      if( this.length ) {\r\n        list[0] = this[this.length - 1];\r\n        list.length = 1;\r\n      }\r\n      return list;\r\n    };\r\n\r\n  ListDOM.prototype.find = function(selector) {\r\n      var list = this, elems = new ListDOM(), n = 0, i, j, len, len2, found;\r\n\r\n      if( !selector ) {\r\n        return list;\r\n      }\r\n\r\n      if( /^\\s*>/.test(selector) ) {\r\n        selector = selector.replace(/^\\s*>\\s*([^\\s]*)\\s*/, function (match, selector2) {\r\n          list = list.children(selector2);\r\n          return '';\r\n        });\r\n      }\r\n\r\n      for( i = 0, len = list.length; i < len; i++ ) {\r\n        found = list[i].querySelectorAll(selector);\r\n        for( j = 0, len2 = found.length; j < len2 ; j++ ) {\r\n          elems[n++] = found[j];\r\n        }\r\n      }\r\n      elems.length = n;\r\n\r\n      return filterDuplicated(elems);\r\n    };\r\n\r\n\r\n  ListDOM.prototype.$ = ListDOM.prototype.find;\r\n\r\n  ListDOM.prototype.add = function (selector, element) {\r\n    var el2add = jqlite(selector, element),\r\n        i, len, n = this.length,\r\n        elems = new ListDOM();\r\n\r\n    for( i = 0, len = this.length ; i < len; i++ ) {\r\n      elems[i] = this[i];\r\n    }\r\n\r\n    for( i = 0, len = el2add.length ; i < len; i++ ) {\r\n      elems[n++] = el2add[i];\r\n    }\r\n    elems.length = n;\r\n\r\n    return filterDuplicated(elems);\r\n  };\r\n\r\n  ListDOM.prototype.each = function(each) {\r\n      if( _isFunction(each) ) {\r\n        for( var i = 0, len = this.length; i < len ; i++ ) {\r\n          each.call(this[i], i, this[i]);\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.empty = function() {\r\n      for( var i = 0, len = this.length, elem, child; i < len ; i++ ) {\r\n          elem = this[i];\r\n          child = elem.firstChild;\r\n          while( child ) {\r\n            elem.removeChild(child);\r\n            child = elem.firstChild;\r\n          }\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.filter = function(selector) {\r\n      var elems = new ListDOM(), elem, i, len;\r\n\r\n      if( _isFunction(selector) ) {\r\n        for( i = 0, len = this.length, elem; i < len ; i++ ) {\r\n          elem = this[i];\r\n          if( selector.call(elem, i, elem) ) {\r\n            elems.push(elem);\r\n          }\r\n        }\r\n      } else if( _isString(selector) ) {\r\n        for( i = 0, len = this.length, elem; i < len ; i++ ) {\r\n          elem = this[i];\r\n          if( elem[matchesSelectorProp](selector) ) {\r\n            elems.push(elem);\r\n          }\r\n        }\r\n      }\r\n      return elems;\r\n    };\r\n\r\n  var _getClosest = auxDiv.closest ? function (element, selector) {\r\n    return element.closest(selector);\r\n  } : function (element, selector) {\r\n    var elem = element.parentElement;\r\n\r\n    while( elem ) {\r\n      if( elem[matchesSelectorProp](selector) ) {\r\n        return elem;\r\n      }\r\n      elem = elem.parentElement;\r\n    }\r\n    return null;\r\n  };\r\n\r\n  ListDOM.prototype.closest = function(selector) {\r\n      var elems = new ListDOM(), n = 0, elem;\r\n\r\n      if( !selector ) {\r\n        return this;\r\n      }\r\n\r\n      for( var i = 0, len = this.length; i < len; i++ ) {\r\n        elem = _getClosest(this[i], selector);\r\n        if( elem ) {\r\n          elems[n++] = elem;\r\n        }\r\n      }\r\n      elems.length = n;\r\n\r\n      return filterDuplicated(elems);\r\n    };\r\n\r\n  ListDOM.prototype.children = auxDiv.children ? function (selector){\r\n      var elems = new ListDOM();\r\n\r\n      for( var i = 0, len = this.length; i < len; i++ ) {\r\n        pushMatches(elems, this[i].children);\r\n      }\r\n\r\n      return selector ? elems.filter(selector) : elems;\r\n\r\n    } : function (selector) {\r\n      var elems = new ListDOM();\r\n\r\n      Array.prototype.forEach.call(this, function(elem){\r\n        elem = elem.firstElementChild || elem.firstChild;\r\n        while(elem) {\r\n          elems[elems.length] = elem;\r\n          elem = elem.nextElementSibling || elem.nextSibling;\r\n        }\r\n      });\r\n\r\n      return selector ? elems.filter(selector) : elems;\r\n    };\r\n\r\n  ListDOM.prototype.parent = function (selector) {\r\n      var list = new ListDOM(), n = 0;\r\n\r\n      for( var i = 0, len = this.length; i < len; i++ ) {\r\n        if( this[i].parentElement ) {\r\n          list[n++] = this[i].parentElement;\r\n        }\r\n      }\r\n        list.length = n;\r\n\r\n      return filterDuplicated( selector ? list.filter(selector): list );\r\n    };\r\n\r\n  ListDOM.prototype.contents = function (selector) {\r\n      var elems = new ListDOM();\r\n\r\n      Array.prototype.forEach.call(this,function(elem){\r\n        elem = elem.firstChild;\r\n        while(elem) {\r\n          elems[elems.length] = elem;\r\n          elem = elem.nextSibling;\r\n        }\r\n      });\r\n\r\n      return selector ? elems.filter(selector) : elems;\r\n    };\r\n\r\n    // function _cloneEvents(nodeSrc, nodeDest) {\r\n    //   console.log('getEventListeners', getEventListeners);\r\n    //   var events = getEventListeners(nodeSrc),\r\n    //       e, i, len;\r\n\r\n    //   for( e in events ) {\r\n    //     for( i = 0, len = events[e].length; i < len ; i++ ) {\r\n    //       nodeDest.addEventListener(e, events[e][i].listener, events[e][i].useCapture);\r\n    //     }\r\n    //   }\r\n    // }\r\n\r\n  ListDOM.prototype.clone = function (deep, _cloneEvents) {\r\n    var elems = new ListDOM(), i, len;\r\n    deep = deep === undefined || deep;\r\n\r\n    for( i = 0, len = this.length; i < len ; i++ ) {\r\n      elems[i] = this[i].cloneNode(deep);\r\n\r\n      // if(cloneEvents) {\r\n      //   _cloneEvents(this[i], list[i]);\r\n      // }\r\n    }\r\n\r\n    elems.length = len;\r\n    return elems;\r\n  };\r\n\r\n  ListDOM.prototype.data = function (key, value) {\r\n      if( !this.length ) {\r\n        return value ? this : undefined;\r\n      }\r\n\r\n      if( value === undefined ) {\r\n        var data = this[0].$$jqliteData && this[0].$$jqliteData[key];\r\n        if( data === undefined ) {\r\n          data = this.dataset(key);\r\n          if( data === undefined ) {\r\n            return undefined;\r\n          } else if( data.charAt(0) === '{' || data.charAt(0) === '[' ) {\r\n            return JSON.parse(data);\r\n          } else if( /^\\d+$/.test(data) ) {\r\n            return Number(data);\r\n          } else {\r\n            return data;\r\n          }\r\n        }\r\n        return data;\r\n      }\r\n\r\n      for( var i = 0, n = this.length; i < n ; i++ ) {\r\n        this[i].$$jqliteData = this[i].$$jqliteData || {};\r\n        this[i].$$jqliteData[key] = value;\r\n      }\r\n    };\r\n\r\n  ListDOM.prototype.removeData = function (key) {\r\n      for( var i = 0, n = this.length ; i < n ; i++ ) {\r\n        if( this[i].$$jqliteData && this[i].$$jqliteData[key] ) {\r\n          delete this[i].$$jqliteData[key];\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.dataset = auxDiv.dataset ? function (key, value) {\r\n      var i, len;\r\n\r\n      if( value === undefined ) {\r\n        if( key === undefined ) {\r\n          return this[0] ? this[0].dataset : {};\r\n        } else {\r\n          return ( this[0] || {} ).dataset[key];\r\n        }\r\n      } else {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          this[i].dataset[key] = value;\r\n        }\r\n        return this;\r\n      }\r\n    } : function (key, value) {\r\n      var i, len;\r\n      if( value === undefined ) {\r\n        var values = [];\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          values.push( this[i].getAttribute('data-' + key) );\r\n        }\r\n        return ( this[0] || { getAttribute: function() { return false; } } ).getAttribute(key);\r\n      } else {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          this[i].setAttribute('data-' + key, value);\r\n        }\r\n      }\r\n    };\r\n\r\n  ListDOM.prototype.removeDataset = auxDiv.dataset ? function (key) {\r\n      var i, len;\r\n      if( typeof key === 'string' ) {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          delete this[i].dataset[key];\r\n        }\r\n      } else if( _isArray(key) ) {\r\n        for( i = 0, len = key.length; i < len ; i++ ) {\r\n          this.removeData(key[i]);\r\n        }\r\n      }\r\n      return this;\r\n    } : function (key) {\r\n      var i, len;\r\n      if( typeof key === 'string' ) {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          this[i].removeAttribute('data-' + key);\r\n        }\r\n      } else if( _isArray(key) ) {\r\n        for( i = 0, len = key.length; i < len ; i++ ) {\r\n          this.removeData(key[i]);\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.attr = function (key, value) {\r\n      var i, len;\r\n      if( _isFunction(value) ) {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          this[i].setAttribute( key, value(i, this[i].getAttribute(key) ) );\r\n        }\r\n      } else if( value !== undefined ) {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          this[i].setAttribute(key,value);\r\n        }\r\n      } else if( this[0] ) {\r\n        return this[0].getAttribute( key );\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.removeAttr = function (key) {\r\n      for( var i = 0, len = this.length; i < len ; i++ ) {\r\n        this[i].removeAttribute(key);\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.prop = function (key, value) {\r\n      var i, len;\r\n\r\n      if( _isFunction(value) ) {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          this[i][key] = value( i, this[i][key] );\r\n        }\r\n      } else if( value !== undefined ) {\r\n        for( i = 0, len = this.length; i < len ; i++ ) {\r\n          this[i][key] = value;\r\n        }\r\n      } else if( this[0] ) {\r\n        return this[0][key];\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.val = function (value) {\r\n      var element;\r\n      if( value === undefined ) {\r\n        element = this[0];\r\n        if( element.nodeName === 'select' ) {\r\n          return element.options[element.selectedIndex].value;\r\n        } else {\r\n          return ( this[0].value || this[0].getAttribute('value') );\r\n        }\r\n      } else {\r\n        for( var i = 0, len = this.length; i < len ; i++ ) {\r\n          if( this[i].nodeName === 'select' ) {\r\n            element = this[i];\r\n            for( var j = 0, len2 = element.options.length; j < len2 ; j++ ) {\r\n              if( element.options[j].value === value ) {\r\n                element.options[j].selected = true;\r\n                break;\r\n              }\r\n            }\r\n          } else if (this[i].value !== undefined) {\r\n            this[i].value = value;\r\n          } else {\r\n            this[i].setAttribute('value', value);\r\n          }\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n  var classListHas = classListEnabled ? function (el, className) {\r\n        return el.classList.contains(className);\r\n      } : function (el, className) {\r\n        return new RegExp('\\\\b' + (className || '') + '\\\\b','').test(el.className);\r\n      },\r\n      classListAdd = classListEnabled ? function (el, className) {\r\n        el.classList.add(className);\r\n      } : function (el, className) {\r\n        if( !classListHas(el, className) ) {\r\n          el.className += ' ' + className;\r\n        }\r\n      },\r\n      classListRemove = classListEnabled ? function (el, className) {\r\n        el.classList.remove(className);\r\n      } : function (el, className) {\r\n        el.className = el.className.replace(new RegExp('\\\\s*' + className + '\\\\s*','g'), ' ');\r\n      };\r\n\r\n  ListDOM.prototype.addClass = function (className) {\r\n      var i, n;\r\n\r\n      if( className instanceof Function ) {\r\n        for( i = 0, n = this.length; i < n ; i++ ) {\r\n          classListAdd(this[i], className.call(this[i], i, this[i].className) );\r\n        }\r\n      } else if( className.indexOf(' ') >= 0 ) {\r\n        className.split(/\\s+/).forEach(function (_className) {\r\n          for( var i = 0, n = this.length; i < n ; i++ ) {\r\n            classListAdd(this[i], _className);\r\n          }\r\n        }.bind(this) );\r\n      } else {\r\n        for( i = 0, n = this.length; i < n ; i++ ) {\r\n          classListAdd(this[i], className);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.removeClass = function (className) {\r\n      var i, n;\r\n\r\n      if( className instanceof Function ) {\r\n        for( i = 0, n = this.length; i < n ; i++ ) {\r\n          classListRemove(this[i], className.call(this[i], i, this[i].className) );\r\n        }\r\n      } else if( className.indexOf(' ') >= 0 ) {\r\n        className.split(/\\s+/).forEach(function (_className) {\r\n          for( var i = 0, n = this.length; i < n ; i++ ) {\r\n            classListRemove(this[i], _className);\r\n          }\r\n        }.bind(this) );\r\n      } else {\r\n        for( i = 0, n = this.length; i < n ; i++ ) {\r\n          classListRemove(this[i], className);\r\n        }\r\n      }\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.hasClass = function (className) {\r\n      for( var i = 0, n = this.length; i < n ; i++ ) {\r\n        if( classListHas(this[i], className) ) {\r\n          return true;\r\n        }\r\n      }\r\n      return false;\r\n    };\r\n\r\n  ListDOM.prototype.toggleClass = function (className, state) {\r\n      var i, n, _state, _className;\r\n\r\n      if( className instanceof Function ) {\r\n\r\n        for( i = 0, n = this.length; i < n ; i++ ) {\r\n          _className = className.call(this[i], i, this[i].className, state);\r\n          _state = state === undefined ? !classListHas(this[i], _className) : state;\r\n          ( _state ? classListAdd : classListRemove )(this[i], _className);\r\n        }\r\n\r\n      } else if( className.indexOf(' ') >= 0 ) {\r\n\r\n        className.split(/\\s+/).forEach(function (_className) {\r\n          for( i = 0, n = this.length; i < n ; i++ ) {\r\n            _state = state === undefined ? !classListHas(this[i], _className) : state;\r\n            ( _state ? classListAdd : classListRemove )(this[i], _className);\r\n          }\r\n        }.bind(this) );\r\n\r\n      } else {\r\n        for( i = 0, n = this.length; i < n ; i++ ) {\r\n          _state = state === undefined ? !classListHas(this[i], className) : state;\r\n          ( _state ? classListAdd : classListRemove )(this[i], className);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.append = function (content) {\r\n      var jContent = $(content), jContent2, i, j, len, len2, element;\r\n\r\n      jContent.remove();\r\n\r\n      for( i = 0, len = this.length; i < len; i++ ) {\r\n        jContent2 = ( i ? jContent.clone(true) : jContent );\r\n        element = this[i];\r\n        for( j = 0, len2 = jContent2.length; j < len2; j++ ) {\r\n          element.appendChild(jContent2[j]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.appendTo = function (target) {\r\n      $(target).append(this);\r\n    };\r\n\r\n  ListDOM.prototype.prepend = function (content) {\r\n      var jContent = $(content), jContent2, i, j, len, len2, element, previous;\r\n\r\n      jContent.remove();\r\n\r\n      for( i = 0, len = this.length; i < len; i++ ) {\r\n        jContent2 = ( i ? jContent.clone(true) : jContent );\r\n        element = this[i];\r\n        previous = element.firstChild;\r\n\r\n        if( previous ) {\r\n          for( j = 0, len2 = jContent2.length; j < len2; j++ ) {\r\n            element.insertBefore(jContent2[j], previous);\r\n          }\r\n        } else {\r\n          for( j = 0, len2 = jContent2.length; j < len2; j++ ) {\r\n            element.appendChild(jContent2[j]);\r\n          }\r\n        }\r\n\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.before = function (content) {\r\n      var jContent = $(content), jContent2, i, j, len, len2, parent;\r\n\r\n      jContent.remove();\r\n\r\n      for( i = 0, len = this.length; i < len; i++ ) {\r\n        jContent2 = ( i ? jContent.clone(true) : jContent );\r\n        parent = this[i].parentElement || this[i].parentNode;\r\n\r\n        for( j = 0, len2 = jContent2.length; j < len2; j++ ) {\r\n          parent.insertBefore(jContent2[j], this[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.after = function (content) {\r\n      var jContent = $(content), jContent2, i, j, len, len2, element, parent;\r\n\r\n      jContent.remove();\r\n\r\n      for( i = 0, len = this.length; i < len; i++ ) {\r\n        jContent2 = ( i ? jContent.clone(true) : jContent );\r\n        parent = this[i].parentElement || this[i].parentNode;\r\n        element = this[i].nextElementSibling || this[i].nextSibling;\r\n        if( element ) {\r\n          for( j = 0, len2 = jContent2.length; j < len2; j++ ) {\r\n            parent.insertBefore(jContent2[j], element);\r\n            element = jContent2[j];\r\n          }\r\n        } else {\r\n          for( j = 0, len2 = jContent2.length; j < len2; j++ ) {\r\n            parent.appendChild(jContent2[j]);\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.replaceWith = function (content) {\r\n      var jContent = $(content), jContent2, i, j, len2, element, parent, next;\r\n\r\n      if( !jContent.length ) {\r\n        return this;\r\n      }\r\n\r\n      for( i = this.length - 1; i >= 0; i-- ) {\r\n        jContent2 = ( i ? jContent.clone(true) : jContent );\r\n        element = this[i];\r\n        parent = element.parentElement;\r\n\r\n        parent.replaceChild(jContent2[0], element);\r\n\r\n        if( jContent2[1] ) {\r\n          next = jContent2[0].nextElementSibling;\r\n          if( next ) {\r\n            for( j = 1, len2 = jContent2.length; j < len2; j++ ) {\r\n              parent.insertBefore(jContent2[j], next);\r\n            }\r\n          } else {\r\n            for( j = 1, len2 = jContent2.length; j < len2; j++ ) {\r\n              parent.appendChild(jContent2[j]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.wrap = function (content) {\r\n    var getWrapper = _isFunction(content) ? function (i) {\r\n      return $( content(i) );\r\n    } : (function () {\r\n      var jContent = $(content),\r\n          jDolly = jContent.clone(true);\r\n\r\n      return function (i) {\r\n        return i ? jDolly.clone(true) : jContent;\r\n      };\r\n    })();\r\n\r\n    this.each(function (i) {\r\n      var wrapper = getWrapper(i)[0],\r\n          parent = this.parentElement,\r\n          firstChild = wrapper;\r\n\r\n      while( firstChild.firstElementChild ) {\r\n        firstChild = firstChild.firstElementChild;\r\n      }\r\n\r\n      if( parent ) {\r\n        parent.replaceChild(wrapper, this);\r\n        firstChild.appendChild(this);\r\n      }\r\n\r\n    });\r\n\r\n    return this;\r\n  };\r\n\r\n  ListDOM.prototype.wrapAll = function (content) {\r\n    var element = $( _isFunction(content) ? content() : content )[0],\r\n        parent = this[0].parentElement;\r\n\r\n    parent.replaceChild(element, this[0]);\r\n\r\n    if( element ) {\r\n      while( element.firstElementChild ) {\r\n        element = element.firstElementChild;\r\n      }\r\n    }\r\n\r\n    for( var i = 0, len = this.length; i < len ; i++ ) {\r\n      element.appendChild(this[i]);\r\n    }\r\n\r\n    return $(element);\r\n  };\r\n\r\n  ListDOM.prototype.unwrap = function () {\r\n\r\n    var parents = this.parent(), parent;\r\n\r\n    for( var i = 0, len = parents.length; i < len ; i++ ) {\r\n      parent = parents.eq(i);\r\n      parent.replaceWith( parent.children() );\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  ListDOM.prototype.next = function (selector) {\r\n      var list = new ListDOM(), elem, n = 0;\r\n\r\n      for( var i = 0, len = this.length; i < len; i++ ) {\r\n        elem = this[i].nextElementSibling;\r\n        if( elem ) {\r\n          list[n++] = elem;\r\n        }\r\n      }\r\n      list.length = n;\r\n\r\n      return ( typeof selector === 'string' ) ? list.filter(selector): list;\r\n    };\r\n\r\n  ListDOM.prototype.nextAll = function (selector) {\r\n      var list = new ListDOM(), elem, n = 0;\r\n\r\n      for( var i = 0, len = this.length; i < len; i++ ) {\r\n        elem = this[i].nextElementSibling;\r\n        while( elem ) {\r\n          list[n++] = elem;\r\n          elem = elem.nextElementSibling;\r\n        }\r\n      }\r\n      list.length = n;\r\n\r\n      return filterDuplicated( selector ? list.filter(selector): list );\r\n    };\r\n\r\n  ListDOM.prototype.prev = function (selector) {\r\n      var list = new ListDOM(), elem, n = 0;\r\n\r\n      for( var i = 0, len = this.length; i < len; i++ ) {\r\n        elem = this[i].previousElementSibling;\r\n        if( elem ) {\r\n          list[n++] = elem;\r\n        }\r\n      }\r\n      list.length = n;\r\n\r\n      return selector ? list.filter(selector): list;\r\n    };\r\n\r\n  function _prevAll (list, element, n) {\r\n    if( element ) {\r\n      if( element.previousElementSibling ) {\r\n        n = _prevAll(list, element.previousElementSibling, n);\r\n      }\r\n      list[n++] = element;\r\n    }\r\n    return n;\r\n  }\r\n\r\n  ListDOM.prototype.prevAll = function (selector) {\r\n      var list = new ListDOM(), n = 0;\r\n\r\n      for( var i = 0, len = this.length; i < len; i++ ) {\r\n        n = _prevAll(list, this[i].previousElementSibling, n);\r\n      }\r\n      list.length = n;\r\n\r\n      return filterDuplicated( selector ? list.filter(selector): list );\r\n    };\r\n\r\n  ListDOM.prototype.remove = function (selector) {\r\n      var list = selector ? this.filter(selector) : this, parent;\r\n\r\n      for( var i = 0, len = list.length; i < len; i++ ) {\r\n        parent = list[i].parentElement || list[i].parentNode;\r\n        if( parent ) {\r\n          parent.removeChild(list[i]);\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.detach = function (selector) {\r\n      var list = selector ? this.filter(selector) : this,\r\n          elems = new ListDOM();\r\n\r\n      for( var i = 0, len = list.length; i < len; i++ ) {\r\n        detached.appendChild(list[i]);\r\n        elems.push(list[i]);\r\n      }\r\n\r\n      return elems;\r\n    };\r\n\r\n  ListDOM.prototype.css = function (key, value) {\r\n\r\n      if( value !== undefined ) {\r\n        var i, len;\r\n        value = ( value instanceof Function ) ? value() : ( value instanceof Number ? (value + 'px') : value );\r\n\r\n        if( typeof value === 'string' && /^\\+=|\\-=/.test(value) ) {\r\n          value = ( value.charAt(0) === '-' ) ? -parseFloat(value.substr(2)) : parseFloat(value.substr(2));\r\n\r\n          for( i = 0, len = this.length; i < len; i++ ) {\r\n            this[i].style[key] = parseFloat(this[i].style[key]) + value + 'px';\r\n          }\r\n        } else {\r\n          for( i = 0, len = this.length; i < len; i++ ) {\r\n            this[i].style[key] = value;\r\n          }\r\n        }\r\n        return this;\r\n      } else if( key instanceof Object ) {\r\n        for( var k in key ) {\r\n          this.css(k, key[k]);\r\n        }\r\n      } else if( this[0] ) {\r\n        return this[0].style[key] || window.getComputedStyle(this[0])[key];\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n  var transitionKey = auxDiv.style.webkitTransition !== undefined ? 'webkitTransition' : (\r\n    auxDiv.style.mozTransition !== undefined ? 'mozTransition' : (\r\n      auxDiv.style.msTransition !== undefined ? 'msTransition' : undefined\r\n    )\r\n  );\r\n\r\n  function animateFade (list, show, time, timingFunction, callback) {\r\n    if( typeof time === 'string' ) {\r\n      time = animateFade.times[time];\r\n    }\r\n\r\n    timingFunction = timingFunction || 'linear';\r\n    var opacityStart = show ? 0 : 1,\r\n        opacityEnd = show ? 1 : 0;\r\n\r\n    for( var i = 0, n = list.length; i < n ; i++ ) {\r\n      list[i].style.opacity = opacityStart;\r\n    }\r\n    setTimeout(function () {\r\n      for( var i = 0, n = list.length; i < n ; i++ ) {\r\n        list[i].$$jqliteTransition = list[i].$$jqliteTransition === undefined ? ( list[i].style[transitionKey] || '' ) : list[i].$$jqliteTransition;\r\n        list[i].style[transitionKey] = 'opacity ' + time + 'ms ' + timingFunction;\r\n        list[i].style.opacity = opacityEnd;\r\n      }\r\n    }, 20);\r\n\r\n    setTimeout(function () {\r\n      for( var i = 0, n = list.length; i < n ; i++ ) {\r\n        list[i].style.opacity = '';\r\n        list[i].style[transitionKey] = list[i].$$jqliteTransition;\r\n      }\r\n      callback.call(list);\r\n    }, time);\r\n\r\n    return list;\r\n  }\r\n\r\n  animateFade.times = {\r\n    slow: 600,\r\n    normal: 400,\r\n    fast: 200\r\n  };\r\n\r\n  ListDOM.prototype.show = function (time, easing, callback) {\r\n    if( time ) {\r\n      var list = this;\r\n      this.show();\r\n      return animateFade(list, true, time, easing, callback || function () {});\r\n    }\r\n\r\n    for( var i = 0, n = this.length; i < n ; i++ ) {\r\n      if( this[i].style.display ) {\r\n        this[i].style.display = '';\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  ListDOM.prototype.hide = function (time, easing, callback) {\r\n    if( time ) {\r\n      return animateFade(this, false, time, easing, function () {\r\n        this.hide();\r\n        if( callback ) {\r\n          callback.call(this);\r\n        }\r\n      });\r\n    }\r\n\r\n    for( var i = 0, n = this.length; i < n ; i++ ) {\r\n      this[i].style.display = 'none';\r\n    }\r\n    return this;\r\n  };\r\n\r\n  ListDOM.prototype.position = function () {\r\n    if( this.length ) {\r\n      return {\r\n        top: this[0].offsetTop,\r\n        left: this[0].offsetLeft\r\n      };\r\n    }\r\n  };\r\n\r\n  ListDOM.prototype.offset = function (coordinates) {\r\n    if( coordinates === undefined ) {\r\n      var rect = this[0].getBoundingClientRect();\r\n      return this.length && { top: rect.top + document.body.scrollTop, left: rect.left };\r\n    }\r\n    if( coordinates instanceof Function ) {\r\n      coordinates = coordinates();\r\n    }\r\n    if( typeof coordinates === 'object' ) {\r\n      if( coordinates.top !== undefined && coordinates.left !== undefined ) {\r\n        for( var i = 0, len = this.length ; i < len ; i++ ) {\r\n          this[i].style.position = 'relative';\r\n\r\n          var p = this[i].getBoundingClientRect();\r\n\r\n          this[i].style.top = coordinates.top - p.top + parseFloat(this[i].style.top || 0) - document.body.scrollTop + 'px';\r\n          this[i].style.left = coordinates.left - p.left + parseFloat(this[i].style.left || 0) + 'px';\r\n        }\r\n        return coordinates;\r\n      }\r\n    }\r\n  };\r\n\r\n  ListDOM.prototype.width = function (value) {\r\n    var el;\r\n    if( value === true ) {\r\n      if( this.length ) {\r\n        el = this[0];\r\n        return el.offsetWidth;\r\n      }\r\n    } else if( value !== undefined ) {\r\n\r\n      for( var i = 0, len = this.length; i< len ; i++ ) {\r\n        this[i].style.width = value;\r\n      }\r\n\r\n    } else if( this.length ) {\r\n      el = this[0];\r\n      return el.offsetWidth -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('border-left-width') ) -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('padding-left') ) -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('padding-right') ) -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('border-right-width') );\r\n    }\r\n  };\r\n\r\n  ListDOM.prototype.height = function (value) {\r\n    var el;\r\n    if( value === true ) {\r\n      if( this.length ) {\r\n        el = this[0];\r\n        return el.offsetHeight;\r\n      }\r\n    } else if( value !== undefined ) {\r\n\r\n      for( var i = 0, len = this.length; i < len ; i++ ) {\r\n        this[i].style.height = value;\r\n      }\r\n\r\n    } else if( this.length ) {\r\n      el = this[0];\r\n      return el.offsetHeight -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('border-top-width') ) -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('padding-top') ) -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('padding-bottom') ) -\r\n        parseFloat( window.getComputedStyle(el, null).getPropertyValue('border-bottom-width') );\r\n    }\r\n  };\r\n\r\n  ListDOM.prototype.html = function (html) {\r\n      var i, len;\r\n      if( html === undefined ) {\r\n        html = '';\r\n        for( i = 0, len = this.length; i < len; i++ ) {\r\n          html += this[i].innerHTML;\r\n        }\r\n        return html;\r\n      } else if( html === true ) {\r\n        html = '';\r\n        for( i = 0, len = this.length; i < len; i++ ) {\r\n          html += this[i].outerHTML;\r\n        }\r\n        return html;\r\n      }\r\n\r\n      if( _isFunction(html) ) {\r\n        for( i = 0, len = this.length; i < len; i++ ) {\r\n          this[i].innerHTML = html(i, this[i].innerHTML);\r\n        }\r\n        return this;\r\n      } else {\r\n        for( i = 0, len = this.length; i < len; i++ ) {\r\n          this[i].innerHTML = html;\r\n        }\r\n      }\r\n      this.find('script').each(function(){\r\n        if( (this.type == 'text/javascript' || !this.type) && this.textContent ) {\r\n          try{\r\n            runScripts('(function(){ \\'use strict\\';' + this.textContent + '})();');\r\n          } catch(err) {\r\n            throw new Error(err.message);\r\n          }\r\n        }\r\n      });\r\n\r\n      return this;\r\n    };\r\n\r\n  ListDOM.prototype.text = function (text) {\r\n      var i, len;\r\n      if( text === undefined ) {\r\n        text = '';\r\n        for( i = 0, len = this.length; i < len; i++ ) {\r\n          text += this[i].textContent;\r\n        }\r\n        return text;\r\n      } else if( _isFunction(text) ) {\r\n        for( i = 0, len = this.length; i < len; i++ ) {\r\n          this[i].textContent = text(i, this[i].textContent);\r\n        }\r\n        return this;\r\n      } else {\r\n        for( i = 0, len = this.length; i < len; i++ ) {\r\n          this[i].textContent = text;\r\n        }\r\n        return this;\r\n      }\r\n    };\r\n\r\n  function addListListeners (list, eventName, listener, once) {\r\n    var i, len;\r\n\r\n    if( typeof eventName === 'string' ) {\r\n\r\n      if( /\\s/.test(eventName) ) {\r\n        eventName = eventName.split(/\\s+/g);\r\n      } else {\r\n        if( !_isFunction(listener) ) {\r\n          throw 'listener needs to be a function';\r\n        }\r\n\r\n        for( i = 0, len = list.length; i < len; i++ ) {\r\n          attachElementListener(list[i], eventName, listener, once);\r\n        }\r\n      }\r\n    }\r\n\r\n    if( _isArray(eventName) ) {\r\n      for( i = 0, len = eventName.length; i < len; i++ ) {\r\n        addListListeners(list, eventName[i], listener, once);\r\n      }\r\n    } else if( _isObject(eventName) ) {\r\n      for( i in eventName ) {\r\n        addListListeners(list, i, eventName[i], once);\r\n      }\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  ListDOM.prototype.on = function (eventName, listener) {\r\n    return addListListeners(this, eventName, listener);\r\n  };\r\n\r\n  var eventActions = {\r\n    list: ['click', 'focus', 'blur', 'submit'],\r\n    define: function (name) {\r\n      ListDOM.prototype[name] = function (listener) {\r\n        if( listener ) {\r\n          this.on(name, listener);\r\n        } else {\r\n          for( var i = 0, len = this.length; i < len; i++ ) {\r\n            this[i][name]();\r\n          }\r\n        }\r\n        return this;\r\n      };\r\n    },\r\n    init: function () {\r\n      for( var i = 0, len = eventActions.list.length; i < len; i++ ) {\r\n        eventActions.define(eventActions.list[i]);\r\n      }\r\n    }\r\n  };\r\n  eventActions.init();\r\n\r\n  ListDOM.prototype.once = function (eventName, listener) {\r\n    return addListListeners(this, eventName, listener, true);\r\n  };\r\n  // for jQuery compatibility\r\n  ListDOM.prototype.one = ListDOM.prototype.once;\r\n\r\n  ListDOM.prototype.off = function (eventName, listener) {\r\n    var i, n;\r\n\r\n    if( /\\s/.test(eventName) ) {\r\n      eventName = eventName.split(/\\s+/g);\r\n    }\r\n\r\n    if( eventName instanceof Array ) {\r\n      for( i = 0, n = this.length; i < n; i++ ) {\r\n        this.off(eventName[i], listener);\r\n      }\r\n      return this;\r\n    }\r\n\r\n    if( eventName === undefined ) {\r\n      var registeredEvents, registeredEvent;\r\n\r\n      for( i = 0, n = this.length; i < n; i++ ) {\r\n        registeredEvents = this[i].$$jqListeners || {};\r\n        for( registeredEvent in registeredEvents ) {\r\n          detachElementListener(this[i], registeredEvent);\r\n          delete registeredEvents[registeredEvent];\r\n        }\r\n      }\r\n    } else if( typeof eventName !== 'string' || ( !_isFunction(listener) && listener !== undefined ) ) {\r\n      throw 'bad arguments';\r\n    }\r\n\r\n    for( i = 0, n = this.length; i < n; i++ ) {\r\n      detachElementListener(this[i], eventName, listener);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  ListDOM.prototype.trigger = function (eventName, args, data) {\r\n    if( typeof eventName !== 'string' ) {\r\n      throw 'bad arguments';\r\n    }\r\n\r\n    for( var i = 0, len = this.length; i < len; i++ ) {\r\n      triggerEvent(this[i], eventName, args, data);\r\n    }\r\n    return this;\r\n  };\r\n\r\n  ListDOM.prototype.stopPropagation = function () {\r\n    for( var i = 0, len = arguments.length; i < len; i++ ) {\r\n      this.on(arguments[i], function (e) {\r\n        e.stopPropagation();\r\n      });\r\n    }\r\n  };\r\n\r\n  // shorthands\r\n\r\n  ['mouseenter', 'mouseleave'].forEach(function (eventName) {\r\n    ListDOM.prototype[eventName] = function (handler) {\r\n      this.on(eventName, handler);\r\n      return this;\r\n    };\r\n  });\r\n\r\n  ListDOM.prototype.hover = function (mouseIn, mouseOut) {\r\n    return this.mouseenter(mouseIn).mouseleave(mouseOut);\r\n  };\r\n\r\n  // finally\r\n\r\n  jqlite.noConflict = function () {\r\n    if( root.$ === jqlite ) {\r\n      delete root.$;\r\n    }\r\n    return jqlite;\r\n  };\r\n\r\n\r\n  function containsFallback( container, contained ) {\r\n    contained = contained.parentnode || contained.parentElement;\r\n\r\n    while( contained ) {\r\n      if( contained === container ) {\r\n        return true;\r\n      }\r\n      contained = contained.parentnode || contained.parentElement;\r\n    }\r\n    return false;\r\n  }\r\n  // compatible with: https://api.jquery.com/jQuery.contains/\r\n  jqlite.contains = function (container, contained) {\r\n    if( arguments.length < 2 ) {\r\n      throw new Error('2 arguments required');\r\n    }\r\n    return container.contains ? container.contains(contained) : containsFallback(container, contained);\r\n  };\r\n\r\n  return jqlite;\r\n\r\n});\r\n"],"file":"../jqlite.js"}